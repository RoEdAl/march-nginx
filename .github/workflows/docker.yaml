#
# Based on:
#
# Docker docs: Distribute build across multiple runners
# https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
#

name: Upload Docker images to GitHub Container Registry (ghcr.io)

on:
  release:
    types: [published, created]
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]

jobs:
  pshow:
    name: Show event
    runs-on: ubuntu-latest
    steps:
      - name: Show event
        run: |
          echo '${{ toJson(github.event) }}' | jq
      - name: Release jq check
        run: |
          github_event='${{ toJson(github.event) }}'
          publish_image=$(jq 'has("release") and ((.release.draft?  or .release.prelease?) | not)' <<< $github_event)
          echo "Publish image: ${publish_image}"
          echo "PUBLISH_IMAGE=${publish_image}" >> $GITHUB_ENV
      - name: Show environment variable
        run: |
          echo "PUBLISH IMAGE: $PUBLISH_IMAGE"

  build:
    name: Build image
    needs: pshow
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

  mbuild:
    name: Build image
    needs: pshow
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - platform: linux/amd64
          - platform: linux/arm64
            qemu: arm64
          - platform: linux/arm/v7
            qemu: arm
          - platform: linux/arm/v6
            qemu: arm
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          gh_repo=${{ github.repository }}
          echo "GH_REPO=${gh_repo,,}" >> $GITHUB_ENV
      
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ matrix.platform.qemu }}
        with:
          platforms: ${{ matrix.platform.qemu }}
          cache-image: false
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        if: ${{ env.PUBLISH_IMAGE }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: ${{ ! env.PUBLISH_IMAGE }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform.platform }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Build and push
        if: ${{ env.PUBLISH_IMAGE }}
        uses: docker/build-push-action@v6
        id: build
        with:
          context: .
          platforms: ${{ matrix.platform.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,"name=ghcr.io/${{ env.GH_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        if: ${{ env.PUBLISH_IMAGE }}
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        if: ${{ env.PUBLISH_IMAGE }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
          compression-level: 0

  merge:
    name: Merge images
    if: ${{ github.env.PUBLISH_IMAGE }}
    runs-on: ubuntu-latest
    needs:
      - mbuild
    steps:
      - name: Prepare
        run: |
          gh_repo=${{ github.repository }}
          echo "GH_REPO=${gh_repo,,}" >> $GITHUB_ENV
        
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          # create latest tag for branch events
          flavor: |
            latest=${{ github.event_name == 'push' && github.ref_type == 'branch' }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'ghcr.io/${{ env.GH_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ghcr.io/${{ env.GH_REPO }}:${{ steps.meta.outputs.version }}
